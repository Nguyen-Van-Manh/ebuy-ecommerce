scalar Date
interface Node {
    _id: ID!
    createdAt: Date
    updatedAt: Date
}
input CreateProductInput {
    name: String!
    description: String!
    slug: String!
    inStock: Int!
    active: Boolean
}
type Product implements Node{
    _id: ID!
    name: String!
    description: String!
    slug: String!
    inStock: Int!
    active: Boolean
    createdAt: Date
    updatedAt: Date
    variants: [ProductVariant]
}
type ListProducts {
    items: [Product!]
    totalItems: Int!
}
enum TypeAsset {
    IMAGE
    VIDEO
    BINARY
}
type Asset implements Node{
    _id: ID!
    name: String!
    type: TypeAsset!
    fileSize: Int!
    width: Int
    height: Int
    preview: String
    createdAt: Date
    updatedAt: Date
}
type ProductVariant implements Node {
    _id: ID!
    productId: ID!
    inStock: Int!
    active: Boolean
    sku: String!
    name: String!
    price: Int!
    featureAsset: Asset
    createdAt: Date
    updatedAt: Date
}
input CreateProductVariantInput {
    productId: ID!
    inStock: Int!
    active: Boolean
    sku: String!
    name: String!
    price: Int!
}
type Query {
    product(_id: ID!): Product
    products(slug: String!): ListProducts!
    productVariant(id: ID!): String
}
type Mutation {
    createProduct(input: CreateProductInput!): Product
    createProductVariant(input: CreateProductVariantInput): [ProductVariant!]
}